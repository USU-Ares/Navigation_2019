# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from inertial_sense/GNSSEphemeris.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import inertial_sense.msg
import std_msgs.msg

class GNSSEphemeris(genpy.Message):
  _md5sum = "b950a03f405d085580c4de95aeee72ef"
  _type = "inertial_sense/GNSSEphemeris"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
int32 sat 		# satellite number
int32 iode 		# IODE Issue of Data, Ephemeris (ephemeris version)
int32 iodc 		# IODC Issue of Data, Clock (clock version)
int32 sva 		# SV accuracy (URA index) IRN-IS-200H p.97            
int32 svh 		# SV health GPS/QZS (0:ok)            
int32 week 		# GPS/QZS: gps week, GAL: galileo week
int32 code 		# GPS/QZS: code on L2 * (00=Invalid, 01 = P Code ON, 11 = C/A code ON, 11 = Invalid) * GAL/CMP: data sources
int32 flag 		# GPS/QZS: L2 P data flag (indicates that the NAV data stream was commanded OFF on the P-code of the in-phase component of the L2 channel) *  CMP: nav type
GTime toe 		# Toe
GTime toc 		# clock data reference time (s) (20.3.4.5)
GTime ttr 		# T_trans
float64 A 		# Semi-Major Axis m
float64 e 		# Eccentricity (no units) 
float64 i0 		# Inclination Angle at Reference Time (rad)
float64 OMG0 	# Longitude of Ascending Node of Orbit Plane at Weekly Epoch (rad)
float64 omg 	# Argument of Perigee (rad)
float64 M0 		# Mean Anomaly at Reference Time (rad)
float64 deln 	# Mean Motion Difference From Computed Value (rad)
float64 OMGd 	# Rate of Right Ascension (rad/s)
float64 idot 	# Rate of Inclination Angle (rad/s)
float64 crc 	# Amplitude of the Cosine Harmonic Correction Term to the Orbit Radius
float64 crs 	# Amplitude of the Sine Harmonic Correction Term to the Orbit Radius (m)
float64 cuc 	# Amplitude of the Cosine Harmonic Correction Term to the Argument of Latitude (rad) 
float64 cus 	# Amplitude of the Sine Harmonic Correction Term to the Argument of Latitude (rad)
float64 cic 	# Amplitude of the Cosine Harmonic Correction Term to the Angle of Inclination (rad)
float64 cis 	# Amplitude of the Sine Harmonic Correction Term to the Angle of Inclination (rad)
float64 toes 	# Reference Time Ephemeris in week (s)
float64 fit 	# fit interval (h) (0: 4 hours, 1:greater than 4 hours)
float64 f0 		# SV clock parameters - af0
float64 f1 		# SV clock parameters - af1
float64 f2 		# SV clock parameters - af2
float64[4] tgd 	# group delay parameters: GPS/QZS:tgd[0]=TGD (IRN-IS-200H p.103) * GAL:tgd[0]=BGD E5a/E1,tgd[1]=BGD E5b/E1	* CMP :tgd[0]=BGD1,tgd[1]=BGD2
float64 Adot 	# Adot for CNAV
float64 ndot 	# ndot for CNAV
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: inertial_sense/GTime
int64 time
float64 sec"""
  __slots__ = ['header','sat','iode','iodc','sva','svh','week','code','flag','toe','toc','ttr','A','e','i0','OMG0','omg','M0','deln','OMGd','idot','crc','crs','cuc','cus','cic','cis','toes','fit','f0','f1','f2','tgd','Adot','ndot']
  _slot_types = ['std_msgs/Header','int32','int32','int32','int32','int32','int32','int32','int32','inertial_sense/GTime','inertial_sense/GTime','inertial_sense/GTime','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64[4]','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,sat,iode,iodc,sva,svh,week,code,flag,toe,toc,ttr,A,e,i0,OMG0,omg,M0,deln,OMGd,idot,crc,crs,cuc,cus,cic,cis,toes,fit,f0,f1,f2,tgd,Adot,ndot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GNSSEphemeris, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sat is None:
        self.sat = 0
      if self.iode is None:
        self.iode = 0
      if self.iodc is None:
        self.iodc = 0
      if self.sva is None:
        self.sva = 0
      if self.svh is None:
        self.svh = 0
      if self.week is None:
        self.week = 0
      if self.code is None:
        self.code = 0
      if self.flag is None:
        self.flag = 0
      if self.toe is None:
        self.toe = inertial_sense.msg.GTime()
      if self.toc is None:
        self.toc = inertial_sense.msg.GTime()
      if self.ttr is None:
        self.ttr = inertial_sense.msg.GTime()
      if self.A is None:
        self.A = 0.
      if self.e is None:
        self.e = 0.
      if self.i0 is None:
        self.i0 = 0.
      if self.OMG0 is None:
        self.OMG0 = 0.
      if self.omg is None:
        self.omg = 0.
      if self.M0 is None:
        self.M0 = 0.
      if self.deln is None:
        self.deln = 0.
      if self.OMGd is None:
        self.OMGd = 0.
      if self.idot is None:
        self.idot = 0.
      if self.crc is None:
        self.crc = 0.
      if self.crs is None:
        self.crs = 0.
      if self.cuc is None:
        self.cuc = 0.
      if self.cus is None:
        self.cus = 0.
      if self.cic is None:
        self.cic = 0.
      if self.cis is None:
        self.cis = 0.
      if self.toes is None:
        self.toes = 0.
      if self.fit is None:
        self.fit = 0.
      if self.f0 is None:
        self.f0 = 0.
      if self.f1 is None:
        self.f1 = 0.
      if self.f2 is None:
        self.f2 = 0.
      if self.tgd is None:
        self.tgd = [0.] * 4
      if self.Adot is None:
        self.Adot = 0.
      if self.ndot is None:
        self.ndot = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.sat = 0
      self.iode = 0
      self.iodc = 0
      self.sva = 0
      self.svh = 0
      self.week = 0
      self.code = 0
      self.flag = 0
      self.toe = inertial_sense.msg.GTime()
      self.toc = inertial_sense.msg.GTime()
      self.ttr = inertial_sense.msg.GTime()
      self.A = 0.
      self.e = 0.
      self.i0 = 0.
      self.OMG0 = 0.
      self.omg = 0.
      self.M0 = 0.
      self.deln = 0.
      self.OMGd = 0.
      self.idot = 0.
      self.crc = 0.
      self.crs = 0.
      self.cuc = 0.
      self.cus = 0.
      self.cic = 0.
      self.cis = 0.
      self.toes = 0.
      self.fit = 0.
      self.f0 = 0.
      self.f1 = 0.
      self.f2 = 0.
      self.tgd = [0.] * 4
      self.Adot = 0.
      self.ndot = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_8iqdqdq21d().pack(_x.sat, _x.iode, _x.iodc, _x.sva, _x.svh, _x.week, _x.code, _x.flag, _x.toe.time, _x.toe.sec, _x.toc.time, _x.toc.sec, _x.ttr.time, _x.ttr.sec, _x.A, _x.e, _x.i0, _x.OMG0, _x.omg, _x.M0, _x.deln, _x.OMGd, _x.idot, _x.crc, _x.crs, _x.cuc, _x.cus, _x.cic, _x.cis, _x.toes, _x.fit, _x.f0, _x.f1, _x.f2))
      buff.write(_get_struct_4d().pack(*self.tgd))
      _x = self
      buff.write(_get_struct_2d().pack(_x.Adot, _x.ndot))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.toe is None:
        self.toe = inertial_sense.msg.GTime()
      if self.toc is None:
        self.toc = inertial_sense.msg.GTime()
      if self.ttr is None:
        self.ttr = inertial_sense.msg.GTime()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 240
      (_x.sat, _x.iode, _x.iodc, _x.sva, _x.svh, _x.week, _x.code, _x.flag, _x.toe.time, _x.toe.sec, _x.toc.time, _x.toc.sec, _x.ttr.time, _x.ttr.sec, _x.A, _x.e, _x.i0, _x.OMG0, _x.omg, _x.M0, _x.deln, _x.OMGd, _x.idot, _x.crc, _x.crs, _x.cuc, _x.cus, _x.cic, _x.cis, _x.toes, _x.fit, _x.f0, _x.f1, _x.f2,) = _get_struct_8iqdqdq21d().unpack(str[start:end])
      start = end
      end += 32
      self.tgd = _get_struct_4d().unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.Adot, _x.ndot,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_8iqdqdq21d().pack(_x.sat, _x.iode, _x.iodc, _x.sva, _x.svh, _x.week, _x.code, _x.flag, _x.toe.time, _x.toe.sec, _x.toc.time, _x.toc.sec, _x.ttr.time, _x.ttr.sec, _x.A, _x.e, _x.i0, _x.OMG0, _x.omg, _x.M0, _x.deln, _x.OMGd, _x.idot, _x.crc, _x.crs, _x.cuc, _x.cus, _x.cic, _x.cis, _x.toes, _x.fit, _x.f0, _x.f1, _x.f2))
      buff.write(self.tgd.tostring())
      _x = self
      buff.write(_get_struct_2d().pack(_x.Adot, _x.ndot))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.toe is None:
        self.toe = inertial_sense.msg.GTime()
      if self.toc is None:
        self.toc = inertial_sense.msg.GTime()
      if self.ttr is None:
        self.ttr = inertial_sense.msg.GTime()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 240
      (_x.sat, _x.iode, _x.iodc, _x.sva, _x.svh, _x.week, _x.code, _x.flag, _x.toe.time, _x.toe.sec, _x.toc.time, _x.toc.sec, _x.ttr.time, _x.ttr.sec, _x.A, _x.e, _x.i0, _x.OMG0, _x.omg, _x.M0, _x.deln, _x.OMGd, _x.idot, _x.crc, _x.crs, _x.cuc, _x.cus, _x.cic, _x.cis, _x.toes, _x.fit, _x.f0, _x.f1, _x.f2,) = _get_struct_8iqdqdq21d().unpack(str[start:end])
      start = end
      end += 32
      self.tgd = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      _x = self
      start = end
      end += 16
      (_x.Adot, _x.ndot,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_8iqdqdq21d = None
def _get_struct_8iqdqdq21d():
    global _struct_8iqdqdq21d
    if _struct_8iqdqdq21d is None:
        _struct_8iqdqdq21d = struct.Struct("<8iqdqdq21d")
    return _struct_8iqdqdq21d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
