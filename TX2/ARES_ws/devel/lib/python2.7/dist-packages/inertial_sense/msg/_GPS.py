# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from inertial_sense/GPS.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class GPS(genpy.Message):
  _md5sum = "6aa847d654b817ff4bb5ba8c773b2a17"
  _type = "inertial_sense/GPS"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# GPS status flags
uint32 GPS_STATUS_FIX_TYPE_NO_FIX               = 0
uint32 GPS_STATUS_FIX_TYPE_DEAD_RECKONING_ONLY  = 256
uint32 GPS_STATUS_FIX_TYPE_2D_FIX               = 512
uint32 GPS_STATUS_FIX_TYPE_3D_FIX               = 768
uint32 GPS_STATUS_FIX_TYPE_GPS_PLUS_DEAD_RECK   = 1024
uint32 GPS_STATUS_FIX_TYPE_TIME_ONLY_FIX        = 1280
uint32 GPS_STATUS_FIX_TYPE_RESERVED1            = 1536
uint32 GPS_STATUS_FIX_TYPE_RESERVED2            = 1792

uint32 GPS_STATUS_FIX_STATUS_FIX_OK             = 65536

Header header
int8 num_sat 							# Number of satellites used in solution
uint32 fix_type 						# Fix type, one of STATUS_FIX_TYPE flags
int32 cno 								# mean carrier noise ratio (dBHz)
float64 latitude 						# latitude (degrees) 
float64 longitude						# longitude (degrees)
float64 altitude						# height above ellipsoid (not MSL) (m)
geometry_msgs/Vector3 posEcef           # Position (m) in ECEF
geometry_msgs/Vector3 velEcef       	# Velocity (m/s) in ECEF
float32 hMSL							# height above MSL
float32 hAcc							# horizontal accuracy
float32 vAcc							# vertical accuracy
float32 sAcc							# speed accuracy (m/s)
float32 pDop							# Position Dilution of Precision (m)	


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  GPS_STATUS_FIX_TYPE_NO_FIX = 0
  GPS_STATUS_FIX_TYPE_DEAD_RECKONING_ONLY = 256
  GPS_STATUS_FIX_TYPE_2D_FIX = 512
  GPS_STATUS_FIX_TYPE_3D_FIX = 768
  GPS_STATUS_FIX_TYPE_GPS_PLUS_DEAD_RECK = 1024
  GPS_STATUS_FIX_TYPE_TIME_ONLY_FIX = 1280
  GPS_STATUS_FIX_TYPE_RESERVED1 = 1536
  GPS_STATUS_FIX_TYPE_RESERVED2 = 1792
  GPS_STATUS_FIX_STATUS_FIX_OK = 65536

  __slots__ = ['header','num_sat','fix_type','cno','latitude','longitude','altitude','posEcef','velEcef','hMSL','hAcc','vAcc','sAcc','pDop']
  _slot_types = ['std_msgs/Header','int8','uint32','int32','float64','float64','float64','geometry_msgs/Vector3','geometry_msgs/Vector3','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,num_sat,fix_type,cno,latitude,longitude,altitude,posEcef,velEcef,hMSL,hAcc,vAcc,sAcc,pDop

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GPS, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.num_sat is None:
        self.num_sat = 0
      if self.fix_type is None:
        self.fix_type = 0
      if self.cno is None:
        self.cno = 0
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.posEcef is None:
        self.posEcef = geometry_msgs.msg.Vector3()
      if self.velEcef is None:
        self.velEcef = geometry_msgs.msg.Vector3()
      if self.hMSL is None:
        self.hMSL = 0.
      if self.hAcc is None:
        self.hAcc = 0.
      if self.vAcc is None:
        self.vAcc = 0.
      if self.sAcc is None:
        self.sAcc = 0.
      if self.pDop is None:
        self.pDop = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.num_sat = 0
      self.fix_type = 0
      self.cno = 0
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.posEcef = geometry_msgs.msg.Vector3()
      self.velEcef = geometry_msgs.msg.Vector3()
      self.hMSL = 0.
      self.hAcc = 0.
      self.vAcc = 0.
      self.sAcc = 0.
      self.pDop = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_bIi9d5f().pack(_x.num_sat, _x.fix_type, _x.cno, _x.latitude, _x.longitude, _x.altitude, _x.posEcef.x, _x.posEcef.y, _x.posEcef.z, _x.velEcef.x, _x.velEcef.y, _x.velEcef.z, _x.hMSL, _x.hAcc, _x.vAcc, _x.sAcc, _x.pDop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.posEcef is None:
        self.posEcef = geometry_msgs.msg.Vector3()
      if self.velEcef is None:
        self.velEcef = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 101
      (_x.num_sat, _x.fix_type, _x.cno, _x.latitude, _x.longitude, _x.altitude, _x.posEcef.x, _x.posEcef.y, _x.posEcef.z, _x.velEcef.x, _x.velEcef.y, _x.velEcef.z, _x.hMSL, _x.hAcc, _x.vAcc, _x.sAcc, _x.pDop,) = _get_struct_bIi9d5f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_bIi9d5f().pack(_x.num_sat, _x.fix_type, _x.cno, _x.latitude, _x.longitude, _x.altitude, _x.posEcef.x, _x.posEcef.y, _x.posEcef.z, _x.velEcef.x, _x.velEcef.y, _x.velEcef.z, _x.hMSL, _x.hAcc, _x.vAcc, _x.sAcc, _x.pDop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.posEcef is None:
        self.posEcef = geometry_msgs.msg.Vector3()
      if self.velEcef is None:
        self.velEcef = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 101
      (_x.num_sat, _x.fix_type, _x.cno, _x.latitude, _x.longitude, _x.altitude, _x.posEcef.x, _x.posEcef.y, _x.posEcef.z, _x.velEcef.x, _x.velEcef.y, _x.velEcef.z, _x.hMSL, _x.hAcc, _x.vAcc, _x.sAcc, _x.pDop,) = _get_struct_bIi9d5f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_bIi9d5f = None
def _get_struct_bIi9d5f():
    global _struct_bIi9d5f
    if _struct_bIi9d5f is None:
        _struct_bIi9d5f = struct.Struct("<bIi9d5f")
    return _struct_bIi9d5f
