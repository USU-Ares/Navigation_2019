#include <ros/ros.h>
#include <tf/transform_broadcaster.h>
//#include <inertial_sense/inertial_sense.h> //Could not get c_make to find this
#include <nav_msgs/Odometry.h>

//look up geometry_msgs/Odometry to finish this subscriber/publisher

tf::Quaternion ins_quat(0, 0, 0, 1);	//Initial values for INS transform frame from world
tf::Vector3 ins_vect(0, 0, 0);

void insCallback(const nav_msgs::Odometry::ConstPtr& msg)
{
    ins_quat = tf::Quaternion(
	msg->pose.pose.orientation.x,
	msg->pose.pose.orientation.y,
	msg->pose.pose.orientation.z,
	msg->pose.pose.orientation.w
    );
    ins_vect = tf::Vector3(
	msg->pose.pose.position.x,
	msg->pose.pose.position.y,
	msg->pose.pose.position.z
    );
}

int main(int argc, char** argv){
  ros::init(argc, argv, "ins_tf_broadcaster");
  ros::NodeHandle n;

  //ros::Rate r(10);

  tf::TransformBroadcaster broadcaster;
  ros::Subscriber ins_sub = n.subscribe("ins", 1, insCallback);

  while(n.ok()){

    broadcaster.sendTransform(	//TODO Should make this a static tf in the future
      tf::StampedTransform(
        tf::Transform(
	  tf::Quaternion(0, 0, -0.707, 0.707), tf::Vector3(0.165, 0.05, 0.345) //static orientation between uINS and RealSense camera
        ),
        ros::Time::now(),"ins_link", "camera_link")
      );

    broadcaster.sendTransform(
      tf::StampedTransform(
	tf::Transform(
	  ins_quat, ins_vect
	),
        ros::Time::now(),"World", "ins_link")
      );r.sleep();
	ros::spin();
/*
    broadcaster.sendTransform(
      tf::StampedTransform(
	tf::Transform(tf::Quaternion(0, 0, 0, 1), tf::Vector3(0.0, 0.0, 0.0)),
	ros::Time::now(), "odom", "base_link"));
    r.sleep();
*/
/*
    broadcaster.sendTransform(		//I think the nav stack is supposed to calculate and publish the map transform from base link, but we will try this for now
      tf::StampedTransform(
	tf::Transform(tf::Quaternion(0, 0, 0, 1), tf::Vector3(0.0, 0.0, 0.0)),
	ros::Time::now(),"map","base_link"));
    r.sleep();
*/
  //}
}
